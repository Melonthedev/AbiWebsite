@page "/loginwithcode"
<PageTitle>Anmeldung</PageTitle>

@using AbiWebsite.Data
@using AbiWebsite.Models
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Security.Claims
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics

@inject AbiDbContext Db
@inject ProtectedSessionStorage Session
@inject IHttpContextAccessor HttpContextAccessor
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation

<h3 class="mb-5">Fast geschafft!</h3>

@if (!string.IsNullOrEmpty(Message)) {
    <div class="alert alert-info">@Message</div>
}

<EditForm Model="loginModel" OnValidSubmit="HandleLoginCode" FormName="loginform">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label class="form-label">Login-Code (3-stellig)</label>
        <InputText class="form-control bg-dark text-white" maxlength="3" @bind-Value="loginModel.LoginCode" />
    </div>
    <button type="submit" class="btn btn-primary">Einloggen</button>
    <button type="button" class="btn btn-link" @onclick="ResendLoginCode">Code erneut anfordern</button>
</EditForm>

@code {
    private string? Message;

    // Schritt 2a: Login mit Code
    private Student? existingStudent;
    [SupplyParameterFromForm]
    private LoginModel loginModel { get; set; } = new();
    public class LoginModel {
        [Required(ErrorMessage = "Login-Code erforderlich.")]
        [StringLength(3, ErrorMessage = "Login-Code muss 3-stellig sein.")]
        public string LoginCode { get; set; } = "";
    }

    private async Task HandleLoginCode() {
        if (existingStudent == null) {
            Message = "Student nicht gefunden.";
            return;
        }

        if (loginModel.LoginCode != existingStudent.LoginCode.ToString("D3")) {
            Message = "Falscher Login-Code!";
            return;
        }

        await SignInStudent(existingStudent);
        Message = $"✅ Eingeloggt als {existingStudent.FullName}";
        //await Task.Delay(500);
        //Navigation.NavigateTo("/", true);
    }

    private async Task ResendLoginCode() {
        Debug.WriteLine("HIUKFE");
        if (existingStudent != null) {
            Message = $"Dein Login-Code ist: {existingStudent.LoginCode:D3} (wird dir auch per E-Mail zugeschickt, falls implementiert)";
            // Hier ggf. E-Mail-Versand einbauen
        } else {
            Message = "NUSSLL";
        }
    }


    private async Task SignInStudent(Student student) {
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, student.FullName),
            new Claim("Tutor", student.Tutor),
            new Claim("Nickname", student.Nickname ?? ""),
            new Claim("StudentId", student.Id.ToString())
        };

        var identity = new ClaimsIdentity(claims, "CookieAuth");
        var principal = new ClaimsPrincipal(identity);

        await HttpContextAccessor.HttpContext!.SignInAsync(
            "CookieAuth",
            principal,
            new AuthenticationProperties {
                IsPersistent = true,
                ExpiresUtc = DateTime.UtcNow.AddDays(300)
            });
    }

    protected override async Task OnInitializedAsync() {
        var state = await AuthProvider.GetAuthenticationStateAsync();
        var user = state.User;

        if (user.Identity?.IsAuthenticated == true) {
            var idClaim = user.FindFirst("StudentId")?.Value;
            int? userID = idClaim != null ? int.Parse(idClaim) : null;

            if (await Db.Students.AnyAsync(s => s.Id == userID)) {
                await InvokeAsync(() => Navigation.NavigateTo("/", true));
            }
        }

        var uri = Navigation.Uri;
        var query = QueryHelpers.ParseQuery(new Uri(uri).Query);

        if (query.TryGetValue("name", out var nameValue)) {
            existingStudent = await Db.Students.FirstOrDefaultAsync(s => s.FullName == nameValue.ToString());
            if (existingStudent == null) {
                Navigation.NavigateTo("/login");
            }
        } else {
            Navigation.NavigateTo("/login");
        }
    }


}