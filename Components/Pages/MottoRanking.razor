@page "/mottoranking"
@rendermode InteractiveServer
<PageTitle>Motto Ranking</PageTitle>

@using AbiWebsite.Data
@using AbiWebsite.Models
@using System.Diagnostics
@using AbiWebsite.Models.ViewModels
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore

@inject AbiDbContext Db
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Abi Motto Ranking</h3>


<ul class="nav nav-tabs bg-dark" data-bs-theme="dark">
    <li class="nav-item" style="cursor: pointer">
        <a class="nav-link @(activeTab == "best" ? "active" : "")"
        @onclick='() => SelectTab("best")'>Best</a>
    </li>
    <li class="nav-item" style="cursor: pointer">
        <a class="nav-link @(activeTab == "new" ? "active" : "")"
        @onclick='() => SelectTab("new")'>Neu</a>
    </li>
    <li class="nav-item" style="cursor: pointer">
        <a class="nav-link @(activeTab == "hot" ? "active" : "")"
           @onclick='() => SelectTab("hot")'>Hot ♨️</a>
    </li>
</ul>


<div class="tab-content mt-3" style="margin-bottom: 100px">
    <div class="tab-pane fade @(activeTab == "best" ? "show active" : "")">
        @foreach (var suggestion in bestSuggestions)
        {
            @RenderSuggestionCard(suggestion)
        }
    </div>
    <div class="tab-pane fade @(activeTab == "new" ? "show active" : "")">
        @foreach (var suggestion in bestSuggestions.OrderByDescending(s => s.CreatedAt))
        {
            @RenderSuggestionCard(suggestion)
        }
    </div>
    <div class="tab-pane fade @(activeTab == "hot" ? "show active" : "")">
        @foreach (var suggestion in hotSuggestions) {
            @RenderSuggestionCard(suggestion)
        }
    </div>
</div>

@code {
    private string activeTab = "best";

    private void SelectTab(string tab)
    {
        activeTab = tab;
    }
}


<button class="btn btn-success floating-btn" onclick="document.location = '/submitmotto'">
    <i class="bi bi-plus"></i> Vorschlag Einreichen
</button>


@code {
    private Dictionary<int, bool> showVotes = new();

    RenderFragment<SuggestionVm> RenderSuggestionCard => suggestion => __builder =>
    {
        var isShowing = showVotes.TryGetValue(suggestion.Id, out var val) && val;

        <div class="rank-card">
            <div class="d-inline-flex justify-content-between">
                <div class="rank-number">#@(bestSuggestions.IndexOf(suggestion) + 1)</div>

                @if (isAdmin || suggestion.Student.Id == currentStudentId)
                {
                    <button class="btn btn-danger btn-sm" style="max-width: 200px" @onclick="() => DeleteMotto(suggestion.Id)">
                        <i class="bi bi-trash"></i> Löschen
                    </button>
                }
            </div>
            

            <div class="suggestion-title">@suggestion.Title</div>

            <div class="suggestion-author">Idee von: <b>@suggestion.Author</b></div>

            <div class="suggestion-timestamp suggestion-author">
                Eingereicht am: <b>@suggestion.CreatedAt.ToLocalTime().ToString("dd.MM.yyyy HH:mm")</b>
            </div>
            

            <div class="votes">
                <span>👍 @suggestion.UpVotes.Count()</span> |
                <span>👎 @suggestion.DownVotes.Count()</span>
            </div>

            <div class="vote-display d-flex justify-content-center align-items-center flex-column">
                <button id="toggleCountdownBtn" class="btn text-white btn-out d-inline-flex align-items-center gap-2"
                aria-pressed="false" title="Hide countdown" @onclick="() => ToggleShowVotes(suggestion.Id)">
                    <i class="bi bi-chevron-down"></i> Mehr Details
                </button>
                @if (isShowing)
                {
                    <div class="row mt-2 w-100">
                        <div class="col">
                            <p class="w-100 text-center">👍</p>
                            <ul>
                                @foreach (var vote in suggestion.UpVotes)
                                {
                                    <li>@vote.Student.GetFormattedName(isAdmin)</li>
                                }
                            </ul>
                        </div>
                        <div class="col">
                            <p class="w-100 text-center">👎</p>
                            <ul>
                                @foreach (var vote in suggestion.DownVotes)
                                {
                                    <li>@vote.Student.GetFormattedName(isAdmin)</li>
                                }
                            </ul>
                        </div>
                    </div>
                }


                <p class="mt-3 mb-0">Deine Stimme:</p>
            </div>
            <div class="vote-buttons">
                <button class="btn btn-sm @(GetVoteClass(suggestion.Id, 1))"
                @onclick="() => Vote(suggestion.Id, 1)">
                    👍
                </button>
                <button class="btn btn-sm @(GetVoteClass(suggestion.Id, -1))"
                @onclick="() => Vote(suggestion.Id, -1)">
                    👎
                </button>
            </div>
        </div>
        ;
    };

    private void ToggleShowVotes(int suggestionId)
    {
        if (showVotes.ContainsKey(suggestionId))
            showVotes[suggestionId] = !showVotes[suggestionId];
        else
            showVotes[suggestionId] = true;
        StateHasChanged();
    }
}



@code {

    private int? currentStudentId = null;
    bool isAdmin = false;

    private List<SuggestionVm> bestSuggestions = new();
    private List<SuggestionVm> hotSuggestions = new();

    private int rank = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var idClaim = user.FindFirst("StudentId");
            if (idClaim != null) {
                currentStudentId = int.Parse(idClaim.Value);
            }
        }

        LoadSuggestions();
    }

    private void LoadSuggestions()
    {
        var currentUserVote = 0;
        if (currentStudentId != null)
        {
            var vote = Db.Votes.FirstOrDefault(v => v.StudentId == currentStudentId);
            if (vote != null)
            {
                currentUserVote = vote.Value;
            }
            var student = Db.Students.Find(currentStudentId);
            if (student != null) {
                isAdmin = student.IsAdmin;
            }
        }
        var all = Db.MottoSuggestions
            .Include(s => s.Votes)
                .ThenInclude(v => v.Student)
            .Select(s => new SuggestionVm
                {
                    Id = s.Id,
                    Title = s.Title,
                    Author = s.Student.GetFormattedName(isAdmin),
                    Description = s.Description,
                    CreatedAt = s.CreatedAt,
                    UpVotes = s.Votes.Where(v => v.Value == 1),
                    DownVotes = s.Votes.Where(v => v.Value == -1),
                    UserVote = currentUserVote,
                    Student = s.Student
                })
            .AsEnumerable()
            .ToList();

        foreach (var s in all)
            s.Score = s.UpVotes.Count() - s.DownVotes.Count();

        bestSuggestions = all.OrderByDescending(s => s.Score).ToList();
        hotSuggestions = all.OrderByDescending(s => GetHotScore(s)).ToList();
    }


    private async void Vote(int suggestionId, int value)
    {
        if (currentStudentId == null || !(await Db.Students.AnyAsync(s => s.Id == currentStudentId.Value)))
        {
            Navigation.NavigateTo("/login?ReturnUrl=%2Fmottoranking", forceLoad: true);
            return;
        }

        var vote = Db.Votes
            .FirstOrDefault(v => v.StudentId == currentStudentId && v.MottoSuggestionId == suggestionId);

        if (vote == null)
        {
            Db.Votes.Add(new Vote
                {
                    StudentId = currentStudentId.Value,
                    MottoSuggestionId = suggestionId,
                    Value = value
                });
        }
        else
        {
            if (vote.Value == value) {
                vote.Value = 0;
            } else {
                vote.Value = value; // überschreibt alte Stimme
            }
        }

        await Db.SaveChangesAsync();
        LoadSuggestions();
    }


    private double GetHotScore(SuggestionVm s) {
        var hours = (DateTime.UtcNow - s.CreatedAt).TotalHours;
        double baseScore = s.UpVotes.Count() - s.DownVotes.Count();
        double timeFactor = Math.Pow(hours + 0.5, 1.1); // Weniger Offset, geringere Potenz

        // Bonus für sehr neue Vorschläge (z.B. < 1h)
        double newBonus = hours < 1 ? 5 : 0;

        return (baseScore + newBonus) / timeFactor;
    }

    private string GetVoteClass(int suggestionId, int value)
    {
        var existing = Db.Votes.FirstOrDefault(v => v.StudentId == currentStudentId && v.MottoSuggestionId == suggestionId);
        if (existing != null && existing.Value == value)
        {
            return "btn-primary"; // markiert aktuell gewählten Button
        }
        return "btn-outline-secondary";
    }

    private void DeleteMotto(int suggestionId)
    {
        var suggestion = Db.MottoSuggestions.Find(suggestionId);
        if (suggestion != null)
        {
            Db.MottoSuggestions.Remove(suggestion);
            Db.SaveChanges();
            LoadSuggestions();
            StateHasChanged();
        }
    }

}