@page "/"
@rendermode InteractiveServer
<PageTitle>Home</PageTitle>

@using AbiWebsite.Data
@using AbiWebsite.Models
@using AbiWebsite.Models.ViewModels
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.Diagnostics
@using System.Timers

@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AbiDbContext Db

<h1 class="impact mb-3">ABI27</h1>

<h1 class="text-center display-3 fw-bold countdown-container">ABI COUNTDOWN</h1>

<div id="countdown" class="text-center countdown-container" style="font-size:2rem; font-weight:bold;"></div>

<div class="d-flex justify-content-center align-items-center" style="min-height:120px;">
    <button id="toggleCountdownBtn" class="btn text-white btn-out d-inline-flex align-items-center gap-2"
    aria-pressed="false" title="Hide countdown">
        <span id="iconWrap" aria-hidden="true">
            <svg id="eyeSlash" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round">
                <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-5 0-9.27-3-11-7 1.02-2.03 2.55-3.73 4.42-4.86"></path>
                <path d="M1 1l22 22"></path>
                <path d="M9.53 9.53A3.5 3.5 0 1 0 14.47 14.47"></path>
            </svg>
        </span>
        <span class="fw-medium">Hide countdown</span>
    </button>
</div>


<script>
    (function(){
    const btn = document.getElementById('toggleCountdownBtn');
    const iconWrap = document.getElementById('iconWrap');
    const srState = document.getElementById('srState');

    // SVGs für toggle (eye = visible, eye-slash = hidden)
    const eyeSVG = `
    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round">
    <path d="M1 12s4-7 11-7 11 7 11 7-4 7-11 7S1 12 1 12z"></path>
    <circle cx="12" cy="12" r="3"></circle>
    </svg>
    `;
    const eyeSlashSVG = `
    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round">
    <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-5 0-9.27-3-11-7 1.02-2.03 2.55-3.73 4.42-4.86"></path>
    <path d="M1 1l22 22"></path>
    <path d="M9.53 9.53A3.5 3.5 0 1 0 14.47 14.47"></path>
    </svg>
    `;

    btn.addEventListener('click', () => {
    const pressed = btn.getAttribute('aria-pressed') === 'true';
    btn.setAttribute('aria-pressed', String(!pressed));
    iconWrap.innerHTML = pressed ? eyeSlashSVG : eyeSVG;
    btn.querySelector('.fw-medium').textContent = pressed ? 'Hide countdown' : 'Show countdown';

    const countdown = document.querySelectorAll('.countdown-container');
    countdown.forEach(e => {
    e.classList.toggle('d-none');
    });
    });

    // Set initial icon to eye-slash (meaning: click -> hide)
    iconWrap.innerHTML = eyeSlashSVG;
    })();
</script>

@if (name != null)
{
    <h2 class="mb-5">Hallo, @name 👋</h2>
}

<div class="ranking d-flex justify-content-center align-items-center flex-column">
    <h3 class="text-center display-5 fw-bold mb-4" style="color: deeppink; text-decoration: underline">MOTTO RANKING:</h3>
    @if (topSuggestion != null) {
        <div class="rank-card">
            <div class="rank-number">#1</div>
            <div class="suggestion-title">@topSuggestion.Title</div>
            <div class="suggestion-author">Idee von: <b>@topSuggestion.Author</b></div>
            <div class="votes">
                <span>👍 @topSuggestion.UpVotes.Count()</span> |
                <span>👎 @topSuggestion.DownVotes.Count()</span>
            </div>
        </div>
    }
    <button class="btn btn-success" @onclick='() => Navigation.NavigateTo("/mottoranking")'>Zu den Vorschlägen</button>
</div>





@code {
    private string? name;
    private string? tutor;
    private string? nickname;
    private int studentId;
    SuggestionVm? topSuggestion;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("startCountdown", "countdown", "2027-06-01T21:13:00");
        }
    }


    protected override async Task OnInitializedAsync()
    {
        var state = await AuthProvider.GetAuthenticationStateAsync();
        var user = state.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            studentId = int.Parse(user.FindFirst("StudentId")!.Value);
            name = user.Identity.Name;
            tutor = user.FindFirst("Tutor")?.Value;
            nickname = user.FindFirst("Nickname")?.Value;
        }

        topSuggestion = Db.MottoSuggestions
            .Select(s => new SuggestionVm
                {
                    Id = s.Id,
                    Title = s.Title,
                    Author = s.Student.FullName,
                    CreatedAt = s.CreatedAt,
                    UpVotes = s.Votes.Where(v => v.Value == 1),
                    DownVotes = s.Votes.Where(v => v.Value == -1),
                    UserVote = 0
                })
            .AsEnumerable()
            .OrderByDescending(s => s.UpVotes.Count() - s.DownVotes.Count())
            .FirstOrDefault();

    }
}