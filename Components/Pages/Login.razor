@page "/login"
<PageTitle>Deine Daten</PageTitle>

@using AbiWebsite.Data
@using AbiWebsite.Models
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore

@inject AbiDbContext Db
@inject ProtectedSessionStorage Session
@inject IHttpContextAccessor HttpContextAccessor
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation

<h3 class="mb-5">Deine Daten</h3>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert alert-info">@Message</div>
}

<EditForm Model="StudentModel" OnValidSubmit="HandleLogin" FormName="login">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Vollständiger Name</label>
        <InputText class="form-control bg-dark text-white" @bind-Value="StudentModel.FullName" />
    </div>

    <div class="mb-3">
        <label class="form-label">Nickname*</label>
        <InputText class="form-control bg-dark text-white" @bind-Value="StudentModel.Nickname" />
    </div>

    <div class="mb-3">
        <label class="form-label">Tutor</label>
        <InputSelect class="form-control bg-dark text-white" @bind-Value="StudentModel.Tutor">
            <option value="">-- Bitte wählen --</option>
            @foreach (var tutor in Tutors)
            {
                <option value="@tutor.Id">@tutor.Name</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Fertig</button>
</EditForm>

@code {

    private List<TutorOption> Tutors = new List<TutorOption>
    {
        new TutorOption { Id = "LIM", Name = "Lindenthal" },
        new TutorOption { Id = "ZIP", Name = "Zippel" },
        new TutorOption { Id = "HEL", Name = "Heller" },
        new TutorOption { Id = "KLS", Name = "Kleinschmidt" }
    };

    public class TutorOption
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
    }

    [SupplyParameterFromForm]
    private Student StudentModel { get; set; } = new();
    private string? Message;

    private async Task HandleLogin()
    {
        // Prüfen, ob Student schon existiert
        var student = Db.Students.FirstOrDefault(s =>
            s.FullName == StudentModel.FullName);

        if (student == null)
        {
            // Neuen Student anlegen
            student = new Student
                {
                    FullName = StudentModel.FullName,
                    Tutor = StudentModel.Tutor,
                    Nickname = StudentModel.Nickname
                };
            Db.Students.Add(student);
            await Db.SaveChangesAsync();
        }

        // ✅ Claims bauen
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, student.FullName),
            new Claim("Tutor", student.Tutor),
            new Claim("Nickname", student.Nickname == null ? "" : student.Nickname),
            new Claim("StudentId", student.Id.ToString())
        };

        var identity = new ClaimsIdentity(claims, "CookieAuth");
        var principal = new ClaimsPrincipal(identity);

        // ✅ Cookie setzen
        await HttpContextAccessor.HttpContext!.SignInAsync(
            "CookieAuth",
            principal,
            new AuthenticationProperties
                {
                    IsPersistent = true,
                    ExpiresUtc = DateTime.UtcNow.AddDays(300)
                });

        Message = $"✅ Eingeloggt als {student.FullName}";
    }

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthProvider.GetAuthenticationStateAsync();
        var user = state.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var idClaim = user.FindFirst("StudentId")?.Value;
            int? userID = idClaim != null ? int.Parse(idClaim) : null;

            if (await Db.Students.AnyAsync(s => s.Id == userID)) {
                await InvokeAsync(() => Navigation.NavigateTo("/", true));
            }
        }
    }

}
